class Person {
  constructor(public first: string, public last: string) {}
  getFullName() {
    return `${this.first} ${this.last}`;
  }
}

// -------------------------------------------
// 1Ô∏è‚É£  Reflect.apply
// -------------------------------------------
function greet(this: Person, salutation: string) {
  return `${salutation}, ${this.getFullName()}!`;
}
const bob = new Person("Bob", "Builder");
console.log("Reflect.apply ‚Üí", Reflect.apply(greet, bob, ["Howdy"])); // Howdy, Bob Builder!

// -------------------------------------------
// 2Ô∏è‚É£  Reflect.construct
// -------------------------------------------
const alice = Reflect.construct(Person, ["Alice", "Wonderland"]) as Person;
console.log("Reflect.construct ‚Üí", alice.getFullName()); // Alice Wonderland

// -------------------------------------------
// 3Ô∏è‚É£  Reflect.defineProperty
// -------------------------------------------
const settings = {};
Reflect.defineProperty(settings, "theme", {
  value: "dark",
  writable: true,
  configurable: true,
});
console.log("Reflect.defineProperty ‚Üí", settings); // { theme: 'dark' }

// -------------------------------------------
// 4Ô∏è‚É£  Reflect.deleteProperty
// -------------------------------------------
Reflect.deleteProperty(settings, "theme");
console.log("Reflect.deleteProperty ‚Üí", settings); // {}

// -------------------------------------------
// 5Ô∏è‚É£  Reflect.get
// -------------------------------------------
const obj = { x: 42 };
console.log("Reflect.get ‚Üí", Reflect.get(obj, "x")); // 42

// -------------------------------------------
// 6Ô∏è‚É£  Reflect.getOwnPropertyDescriptor
// -------------------------------------------
const desc = Reflect.getOwnPropertyDescriptor(obj, "x");
console.log("Reflect.getOwnPropertyDescriptor ‚Üí", desc);

// -------------------------------------------
// 7Ô∏è‚É£  Reflect.getPrototypeOf
// -------------------------------------------
console.log("Reflect.getPrototypeOf ‚Üí", Reflect.getPrototypeOf(obj) === Object.prototype); // true

// -------------------------------------------
// 8Ô∏è‚É£  Reflect.has
// -------------------------------------------
console.log("Reflect.has ‚Üí", Reflect.has(obj, "x")); // true
console.log("Reflect.has (inherited) ‚Üí", Reflect.has(bob, "getFullName")); // true

// -------------------------------------------
// 9Ô∏è‚É£  Reflect.isExtensible
// -------------------------------------------
console.log("Reflect.isExtensible (before) ‚Üí", Reflect.isExtensible(obj)); // true

// -------------------------------------------
// üîí  Demonstrate preventExtensions, then show isExtensible flips
// -------------------------------------------
Reflect.preventExtensions(obj);                    // 10Ô∏è‚É£  Reflect.preventExtensions
console.log("Reflect.preventExtensions ‚Üí done");
console.log("Reflect.isExtensible (after) ‚Üí", Reflect.isExtensible(obj)); // false

// Attempting to add a property now silently fails in non‚Äëstrict mode
(obj as any).y = 99;
console.log("Property added after preventExtensions? ‚Üí", (obj as any).y); // undefined

// -------------------------------------------
// 11  Reflect.ownKeys
// -------------------------------------------
const complex = { a: 1, [Symbol("sym")]: 2 };
console.log("Reflect.ownKeys ‚Üí", Reflect.ownKeys(complex)); // ['a', Symbol(sym)]

// -------------------------------------------
// 12  Reflect.set
// -------------------------------------------
const target = {};
Reflect.set(target, "answer", 42);
console.log("Reflect.set ‚Üí", (target as {answer: number}).answer); // 42

// -------------------------------------------
// 13  Reflect.setPrototypeOf
// -------------------------------------------
const proto = { protoProp: "üëç" };
Reflect.setPrototypeOf(target, proto);
console.log("Reflect.setPrototypeOf ‚Üí", (target as any).protoProp); // üëç
